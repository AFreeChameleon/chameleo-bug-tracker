generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("MAIN_DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  firstName             String
  lastName              String
  password              String
  confirmationEmailSent DateTime?
  confirmedAt           DateTime?
  createdAt             DateTime?      @default(now())
  updatedAt             DateTime?      @updatedAt
  tickets               Ticket[]
  notifications         Notification[]
  roles                 Role[]
  comments              Comment[]
  tokens                Token[]
  projects              Project[]
}

model Ticket {
  id             Int                 @id @default(autoincrement())
  userId         Int
  projectId      String @db.Uuid()
  name           String
  description    String?
  timeEstimate   String
  status         String              @default("Unassigned")
  priority       String
  assignedUserId Int?
  source         String              @default("website")
  ticketNumber   Int
  started        DateTime?
  createdAt      DateTime?           @default(now())
  updatedAt      DateTime?           @updatedAt
  tags           TagTicketJunction[]
  notifications  Notification[]
  comments       Comment[]
  attachments    Attachment[]
  user           User                @relation(fields: [userId], references: [id])
  project        Project             @relation(fields: [projectId], references: [id])
}

model Project {
  id        String       @unique @default(uuid()) @db.Uuid
  userId    Int
  name      String
  key       String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  tags      Tag[]
  tickets   Ticket[]
  roles     Role[]
  user      User      @relation(fields: [userId], references: [id])
}

model Tag {
  id         Int                 @id @default(autoincrement())
  projectId  String @db.Uuid()
  name       String
  createdAt  DateTime?           @default(now())
  updatedAt  DateTime?           @updatedAt
  project    Project             @relation(fields: [projectId], references: [id])
  tagTickets TagTicketJunction[]
}

model TagTicketJunction {
  id       Int    @id @default(autoincrement())
  tagId    Int
  ticketId Int
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  ticketId  Int
  userId    Int
  message   String
  read      Boolean
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Role {
  id        Int       @id @default(autoincrement())
  userId    Int
  projectId String @db.Uuid()
  role      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])
}

model Comment {
  id        Int       @id @default(autoincrement())
  userId    Int
  ticketId  Int
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  ticket    Ticket    @relation(fields: [ticketId], references: [id])
}

model Token {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  token     String    @unique @default(uuid()) @db.Uuid
  purpose   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Attachment {
  id        Int       @id @default(autoincrement())
  ticketId Int
  originalName String
  fileName String
  encoding String
  mimetype String
  destination String
  path String
  size Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  ticket   Ticket   @relation(fields: [ticketId], references: [id])
}