generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("MAIN_DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  email                 String         @unique
  firstName             String
  lastName              String
  password              String
  confirmationEmailSent DateTime?
  confirmedAt           DateTime?
  createdAt             DateTime?      @default(now())
  updatedAt             DateTime?      @updatedAt
  tickets               Ticket[]
  notifications         Notification[]
  roles                 Role[]
  comments              Comment[]
  tokens                Token[]
  projects Project[]
}

model Ticket {
  id             Int            @id @default(autoincrement())
  userId         Int
  projectId      Int
  name           String
  description    String
  timeEstimate   String
  status         String         @default("Unassigned")
  priority       String
  assignedUserId Int
  source         String
  started        DateTime
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
  tags           Tag[]
  notifications  Notification[]
  comments       Comment[]
  user           User           @relation(fields: [userId], references: [id])
  project        Project        @relation(fields: [projectId], references: [id])
}

model Project {
  id      Int      @id @default(autoincrement())
  userId  Int
  name    String
  key     String
  tags    Tag[]
  tickets Ticket[]
  roles   Role[]
  user           User           @relation(fields: [userId], references: [id])
}

model Tag {
  id        Int     @id @default(autoincrement())
  ticketId  Int
  projectId Int
  name      String
  project   Project @relation(fields: [projectId], references: [id])
  ticket    Ticket  @relation(fields: [ticketId], references: [id])
}

model Notification {
  id       Int     @id @default(autoincrement())
  ticketId Int
  userId   Int
  message  String
  read     Boolean
  ticket   Ticket  @relation(fields: [ticketId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
}

model Role {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  role      String
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Comment {
  id       Int    @id @default(autoincrement())
  userId   Int
  ticketId Int
  message  String
  user     User   @relation(fields: [userId], references: [id])
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}

model Token {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  token     String    @unique @default(uuid()) @db.Uuid
  purpose   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
