generator client {
  provider = "prisma-client-js"
  previewFeatures = ["distinct"]
}

datasource db {
  provider = "postgresql"
  url      = env("MAIN_DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  firstName             String
  lastName              String
  password              String
  confirmationEmailSent DateTime?
  confirmedAt           DateTime?
  createdAt             DateTime?             @default(now())
  updatedAt             DateTime?             @updatedAt
  tickets               Ticket[]
  notifications         Notification[]
  roles                 Role[]
  comments              Comment[]
  tokens                Token[]
  projects              Project[]
  projectUsers          ProjectUserJunction[]
  history               History[]

  @@map("users")
}

model Ticket {
  id             Int                 @id @default(autoincrement())
  userId         Int
  projectId      String              @db.Uuid
  name           String
  description    String?
  timeEstimate   String
  status         String              @default("Unassigned")
  priority       String
  assignedUserId Int?
  source         String              @default("website")
  ticketNumber   Int
  started        DateTime?
  archived       Boolean             @default(false)
  createdAt      DateTime?           @default(now())
  updatedAt      DateTime?           @updatedAt
  tags           TagTicketJunction[]
  notifications  Notification[]
  comments       Comment[]
  attachments    Attachment[]
  history        History[]
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  project        Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model Project {
  id        String                @unique @default(uuid()) @db.Uuid
  userId    Int
  name      String
  details   Json?
  createdAt DateTime?             @default(now())
  updatedAt DateTime?             @updatedAt
  tags      Tag[]
  tickets   Ticket[]
  roles     Role[]
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  users     ProjectUserJunction[]
  history   History[]

  @@map("projects")
}

model ProjectUserJunction {
  id        Int     @id @default(autoincrement())
  projectId String  @default(uuid()) @db.Uuid
  userId    Int
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("project_user_junctions")
}

model Tag {
  id         Int                 @id @default(autoincrement())
  projectId  String              @db.Uuid
  name       String
  createdAt  DateTime?           @default(now())
  updatedAt  DateTime?           @updatedAt
  project    Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tagTickets TagTicketJunction[]

  @@map("tags")
}

model TagTicketJunction {
  id       Int    @id @default(autoincrement())
  tagId    Int
  ticketId Int
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@map("tag_ticket_junctions")
}

model Notification {
  id        Int       @id @default(autoincrement())
  ticketId  Int
  userId    Int
  message   String
  read      Boolean
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  ticket    Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Role {
  id        Int       @id @default(autoincrement())
  userId    Int
  projectId String    @db.Uuid
  role      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("roles")
}

model Comment {
  id        Int       @id @default(autoincrement())
  userId    Int
  ticketId  Int
  message   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticket    Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Token {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String    @unique @default(uuid()) @db.Uuid
  purpose   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("tokens")
}

model Attachment {
  id           Int       @id @default(autoincrement())
  ticketId     Int
  originalName String
  fileName     String
  encoding     String
  mimetype     String
  destination  String
  path         String
  size         Int
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  ticket       Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model History {
  id        Int       @id @default(autoincrement())
  userId    Int
  projectId String    @db.Uuid
  ticketId  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticket    Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("history")
}
